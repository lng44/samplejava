# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push to the "main" branch and when new tags are created
  push:
    tags: [ "*" ] # Triggers on any new tag


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      # Log in to JFrog container registry
      - name: Docker Login to JFrog
        env:
          JFROG_REGISTRY: ${{ vars.JFROG_REGISTRY }}
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
        run: |
          docker login "$JFROG_REGISTRY" -u "$JFROG_USERNAME" -p "$JFROG_PASSWORD"

      - name: Build Docker Image
        env:
          GIT_TAG: ${{ github.ref_name }}
        run: |
          docker build -t my-image:"$GIT_TAG" .

      # Push Docker image to JFrog container registry
      - name: Push Docker Image to JFrog
        env:
          JFROG_REGISTRY: ${{ vars.JFROG_REGISTRY }}
          GIT_TAG: ${{ github.ref_name }}
        run: |
          docker push "$JFROG_REGISTRY"/docker-trial/my-image:"$GIT_TAG"

      # # Start Docker container
      # - name: Start Docker container
      #   run: |
      #     docker run -d -p 8080:8080 --name my-container my-image

      # # Wait for a few seconds to ensure the container is up
      # - name: Wait for container to be ready
      #   run: |
      #     Start-Sleep -Seconds 8

      - name: List Docker Container
        run: |
          docker ps -a

      # # Print Log
      # - name: Print continer log
      #   run: |
      #     docker logs my-container

      # # Print content from the application using curl
      # - name: Curl application content
      #   run: |
      #     curl http://localhost:8080

      # # Print Log
      # - name: Print continer log
      #   run: |
      #     docker logs my-container

      # # Optionally, stop and remove the container after testing
      # - name: Cleanup Docker container
      #   run: |
      #     docker stop my-container
      #     docker rm my-container